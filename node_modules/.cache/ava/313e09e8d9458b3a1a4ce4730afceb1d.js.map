{"version":3,"sources":["index.js"],"names":["Bluebird","require","test","Runner","t","runner","startTaskId","throws","run","tasks","clone","fn","arg","resolve","successTaskId","failureTaskId","install","deploy","cleanup","start","results","console","log","is","length"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,OAAOD,QAAQ,KAAR,CAAb;AACA,IAAME,SAASF,QAAQ,QAAR,CAAf;;AAEAC,KAAK,yBAAL;AAAA,kEAAgC,iBAAME,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBC,kBADwB,GACf,IAAIF,MAAJ,CAAW;AACxBG,2BAAa,MADW;AAExBJ,oBAAM;AAFkB,aAAX,CADe;;;AAM9BE,cAAEG,MAAF;AAAA,qBAASF,OAAOG,GAAP,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAuB,iBAAvB,EACE,6BADF;;AAN8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhC;;AAAA;AAAA;AAAA;AAAA;;AAUAN,KAAK,eAAL;AAAA,mEAAsB,kBAAME,CAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,kBADgB,GACP,IAAIF,MAAJ,CAAW;AACtBG,2BAAa,OADS;AAEtBG,qBAAO;AACLC,uBAAO;AACLC,oBADK,cACFC,GADE,EACG;AACN,2BAAOZ,SAASa,OAAT,CAAoBD,GAApB,YAAP;AACD,mBAHI;;AAILE,iCAAe,SAJV;AAKLC,iCAAe;AALV,iBADF;;AASLC,yBAAS;AACPL,oBADO,gBACF;AACH,2BAAOX,SAASa,OAAT,CAAiB,SAAjB,CAAP;AACD,mBAHM;;AAIPC,iCAAe,MAJR;AAKPC,iCAAe;AALR,iBATJ;;AAiBLb,sBAAM;AACJS,oBADI,gBACC;AACH,2BAAOX,SAASa,OAAT,CAAiB,MAAjB,CAAP;AACD,mBAHG;;AAIJC,iCAAe,QAJX;AAKJC,iCAAe;AALX,iBAjBD;;AAyBLE,wBAAQ;AACNN,oBADM,gBACD;AACH,2BAAOX,SAASa,OAAT,CAAiB,QAAjB,CAAP;AACD;AAHK,iBAzBH;;AA+BLK,yBAAS;AACPP,oBADO,gBACF;AACH,2BAAOX,SAASa,OAAT,CAAiB,SAAjB,CAAP;AACD;AAHM;AA/BJ;AAFe,aAAX,CADO;AAAA;AAAA,mBA0CER,OAAOc,KAAP,EA1CF;;AAAA;AA0CdC,mBA1Cc;;;AA4CpBC,oBAAQC,GAAR,CAAYF,OAAZ;AACAhB,cAAEmB,EAAF,uBAAK,0CAAQC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAqB,CAArB,EAAwB,2BAAxB;;AA7CoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA","file":"index.js","sourcesContent":["const Bluebird = require('bluebird')\nconst test = require('ava')\nconst Runner = require('../lib')\n\ntest('run must be implemented', async t => {\n  const runner = new Runner({\n    startTaskId: 'test',\n    test: {}\n  })\n\n  t.throws(runner.run(), 'Not Implemented',\n    'Run needs to be implemented')\n})\n\ntest('basic working', async t => {\n  var runner = new Runner({\n    startTaskId: 'clone',\n    tasks: {\n      clone: {\n        fn(arg) {\n          return Bluebird.resolve(`${arg} clone`)\n        },\n        successTaskId: 'install',\n        failureTaskId: 'cleanup'\n      },\n\n      install: {\n        fn() {\n          return Bluebird.resolve('install')\n        },\n        successTaskId: 'test',\n        failureTaskId: 'cleanup'\n      },\n\n      test: {\n        fn() {\n          return Bluebird.resolve('test')\n        },\n        successTaskId: 'deploy',\n        failureTaskId: 'cleanup'\n      },\n\n      deploy: {\n        fn() {\n          return Bluebird.resolve('deploy')\n        }\n      },\n\n      cleanup: {\n        fn() {\n          return Bluebird.resolve('cleanup')\n        }\n      }\n    }\n  })\n\n  const results = await runner.start()\n\n  console.log(results)\n  t.is(results.length, 2, 'Ran right number of tasks')\n})\n"]}